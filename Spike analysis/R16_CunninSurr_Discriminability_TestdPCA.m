
% 08.05.2018: this is the same scripts as R13_CunninSurr_Discriminability_TestdPCA but with the new channel-electrode map 


allUnitsPSTH_Arr_Base{1,2} = [1 1]; %[3,0];
allUnitsPSTH_Arr_Base{2,2} = [1 2]; %[3,1];
allUnitsPSTH_Arr_Base{3,2} = [1 3]; %[3,4];
allUnitsPSTH_Arr_Base{4,2} = [2 1]; %[6,0];
allUnitsPSTH_Arr_Base{5,2} = [2 2]; %[6,1];
allUnitsPSTH_Arr_Base{6,2} = [2 3]; %[6,4];
allUnitsPSTH_Arr_Base{7,2} = [3 1]; %[9,0];
allUnitsPSTH_Arr_Base{8,2} = [3 2]; %[9,1];
allUnitsPSTH_Arr_Base{9,2} = [3 3]; %[9,4];

aa = [];
for un=1:size(allUnitsPSTH_Arr_Base{1,1},1) % for each unit
    for c = 1:size(allUnitsPSTH_Arr_Base,1) % for each condition
        aa(un, allUnitsPSTH_Arr_Base{c,2}(1), allUnitsPSTH_Arr_Base{c,2}(2), :) = allUnitsPSTH_Arr_Base{c,1}(un,:);  % size(aa) = [numUnits  numEV  numVar  numTimeStamps]
    end
end  
clear c un
numUnits = size(aa,1);
numTimeStamps = length(newT);

trialNum = ones(size(aa,1), size(aa,2), size(aa,3));
for n = 1:size(aa,1) % for each unit
    for s = 1:size(aa,2) % for each EV
        for d = 1:size(aa,3) % for each Var
            assert(isempty(find(isnan(aa(n,s,d,:,1:trialNum(n,s,d))), 1)), 'Something is wrong!')
        end
    end
end
clear n s d

combinedParams = {{1, [1 3]}, {2, [2 3]}, {3}, {[1 2], [1 2 3]}};
margNames = {'EV', 'Var', 'Condition-independent', 'EV/Var Interaction'};

timeEvents = [0 0.4 0.8]; % event times in sec to be shown on the figures
margLabelColours = [23 100 171; 187 20 25; 150 150 150; 114 97 171]/256;


%% apply dPCA on original data
model_dim = 30;
[dataW,dataV,dataWhichMarg] = dpca(aa, model_dim, 'combinedParams', combinedParams);
dataExplVar = dpca_explainedVariance(aa, dataW, dataV, 'combinedParams', combinedParams);

%% Apply dPCA on surrogate data generated by Caninghum's algorithm
rng('shuffle', 'twister') % randomize the seed

% quantify the linear dynmaical structure of original data by a summary statistic (R2)
times_msk = ones(length(newT),1);  %(newT>0 & newT<0.4); 

% prep data tensor
dataTensor = permute(aa, [4 1 3 2]); % dataTensor = [time neurons Var EV]
dataTensor = dataTensor(:,:,:); % dataTensor = [time neuron condisions]-> conditions(2)=[3 0]; conditions(2)=[3 1]; conditions(3)=[3 4]; conditions(4)=[6 1]; ...

% quantify primary features of the original data
[targetSigmaT, targetSigmaN, targetSigmaC, M] = extractFeatures(dataTensor);

% sample many surrogates and build null distribution of summary statistics
numSurrogates = 100;
params = [];

surrogate_type = 'surrogate-TNC';
if strcmp(surrogate_type, 'surrogate-T')
    params.margCov{1} = targetSigmaT;
    params.margCov{2} = [];
    params.margCov{3} = [];
    params.meanTensor = M.T;
elseif strcmp(surrogate_type, 'surrogate-TN')
    params.margCov{1} = targetSigmaT;
    params.margCov{2} = targetSigmaN;
    params.margCov{3} = [];
    params.meanTensor = M.TN;
elseif strcmp(surrogate_type, 'surrogate-TNC')
    params.margCov{1} = targetSigmaT;
    params.margCov{2} = targetSigmaN;
    params.margCov{3} = targetSigmaC;
    params.meanTensor = M.TNC; 
else
    error('please specify a correct surrogate type') 
end

maxEntropy = fitMaxEntropy(params);             % fit the maximum entropy distribution
surrExplVar = {};
surrTensor = {};
for i = 1:numSurrogates
    fprintf('surrogate %d from %d \n', i, numSurrogates)
    [temp] = sampleTME(maxEntropy);       % generate TME random surrogate data.
    cc = reshape(temp, [numTimeStamps numUnits 3 3]);  % cc = [time neuron Var EV]
    cc = permute(cc, [1 2 4 3]); % cc = [time neuron EV Var]
    surrTensor{i} = permute(cc,[2 3 4 1]); % surrTensor{i} = [neuron EV Var time]
    [surrW{i}, surrV{i}, surrWhichMarg{i}] = dpca(surrTensor{i}, model_dim, 'combinedParams', combinedParams);
    surrExplVar{i} = dpca_explainedVariance(surrTensor{i}, surrW{i}, surrV{i}, 'combinedParams', combinedParams);
    
    clear cc temp
end
clear i

% plot surrogate data in dPC space 
if 0
    i = 10; % select which surrogate to plot
    dpca_plot(surrTensor{i}, surrW{i}, surrV{i}, @dpca_plot_default, ...
    'explainedVar', surrExplVar{i}, ...
    'marginalizationNames', margNames, ...
    'marginalizationColours', margLabelColours, ...
    'whichMarg', surrWhichMarg{i},                 ...
    'time', newT,                        ...
    'timeEvents', timeEvents,               ...
    'timeMarginalization', 3, ...
    'legendSubplot', 16);

    dpca_plot(aa, dataW, dataV, @dpca_plot_default, ...
    'explainedVar', dataExplVar, ...
    'marginalizationNames', margNames, ...
    'marginalizationColours', margLabelColours, ...
    'whichMarg', dataWhichMarg,                 ...
    'time', newT,                        ...
    'timeEvents', timeEvents,               ...
    'timeMarginalization', 3, ...
    'legendSubplot', 16);

end


%% Transfer data and surrogates into the dPC space
dataPrj = {}; % Z{Ev,Var} = [Units TimeStamps]
for ev = 1:size(aa,2)
    for vr = 1:size(aa,3)
        dataPrj{ev,vr} = dataW' * squeeze(aa(:,ev,vr,:));
    end
end
clear ev vr

surrPrj = {};
for i = 1:numSurrogates
    for ev = 1:size(aa,2)
        for vr = 1:size(aa,3)
            surrPrj{i}{ev,vr} = surrW{i}' * squeeze(surrTensor{i}(:,ev,vr,:));
        end
    end
    clear ev vr
end
clear i
% size(aa) = [numUnits  numEV  numVar  numTimeStamps]
% ------ Interaction
% measure FDR for data interaction factor
intDataFDR = cell(model_dim,1);
c=0;    
while c < model_dim  % for each dPC component
    c=c+1;
    intDataFDR{c} = zeros(1,8);
for t=1:10:80    % 100ms time intervals
    temp = cellfun(@(x) [mean(x(c,t:t+9)); var(x(c,t:t+9))], dataPrj, 'UniformOutput', 0);   % temp{ev,var} = [mean(psthInTimeWindow); var(psthInTimeWindow)]
    for int1 = 1:(size(aa,2)*size(aa,3)) % for all task conditions
        for int2 = 1:(size(aa,2)*size(aa,3)) % for all task conditions
            if int1~=int2
                intDataFDR{c}(1,1+((t-1)/10)) = intDataFDR{c}(1,1+((t-1)/10)) + ( (temp{int1}(1)-temp{int2}(1))^2/(temp{int1}(2)+temp{int2}(2)) );
            end
        end
    end
    clear temp
end
clear t int1 int2

end
clear c

% measure FDR for noise interaction factor
intSurrFDR = cell(model_dim,1); 
c=0;
while c < model_dim  % for each component
c=c+1;
i = 0;
intSurrFDR{c} = zeros(numSurrogates, 8);
while i < numSurrogates  % for each surrogate data
    i= i+1;
    for t=1:10:80
        temp = cellfun(@(x) [mean(x(c,t:t+9)); var(x(c,t:t+9))],  surrPrj{i}, 'UniformOutput', 0);
        for int1 = 1:(size(aa,2)*size(aa,3))
            for int2 = 1:(size(aa,2)*size(aa,3))
                if int1~=int2
                    intSurrFDR{c}(i, 1+((t-1)/10)) = intSurrFDR{c}(i, 1+((t-1)/10)) + ( (temp{int1}(1)-temp{int2}(1))^2/(temp{int1}(2)+temp{int2}(2)) );
                end
            end
        end
        clear temp
    end
end
clear t int1 int2 i

end
clear c

% ------ Var
varDataFDR = cell(model_dim,1);
c=0;    
while c < model_dim
    c=c+1;
    varDataFDR{c} = zeros(1,8);
    temp0 = cellfun(@(x) x(c,:), dataPrj, 'UniformOutput', 0);
    for t=1:10:80
        temp00{1,1} = cell2mat(temp0(:,1)); 
        temp00{1,2} = cell2mat(temp0(:,2)); 
        temp00{1,3} = cell2mat(temp0(:,3)); 
        temp = cellfun(@(x) [mean( reshape(x(:,t:t+9), 1, []) ); var( reshape(x(:,t:t+9), 1, []) )], temp00, 'UniformOutput', 0);
        clear temp00
        for int1 = 1:(size(aa,3))
            for int2 = 1:(size(aa,3))
                if int1~=int2
                    varDataFDR{c}(1,1+((t-1)/10)) = varDataFDR{c}(1,1+((t-1)/10)) + ( (temp{int1}(1)-temp{int2}(1))^2/(temp{int1}(2)+temp{int2}(2)) );
                end
            end
        end
        clear temp
    end
    clear t int1 int2
end
clear c

varSurrFDR = cell(model_dim,1); 
c=0;
while c < model_dim
    c=c+1;
    varSurrFDR{c} = zeros(numSurrogates, 8);
    temp0 = cellfun(@(x)  cellfun(@(y) y(c,:), x, 'UniformOutput', 0),  surrPrj,  'UniformOutput',  0);
    temp00{1,1} = cellfun(@(x) cell2mat(x(:,1)), temp0,  'UniformOutput',  0);
    temp00{1,2} = cellfun(@(x) cell2mat(x(:,2)), temp0,  'UniformOutput',  0);
    temp00{1,3} = cellfun(@(x) cell2mat(x(:,3)), temp0,  'UniformOutput',  0);
    for t=1:10:80
        temp = cellfun(@(x)   cellfun(@(y) [mean( reshape(y(:,t:t+9), 1, []) ); var( reshape(y(:,t:t+9), 1, []) )],   x, 'UniformOutput', 0),   temp00,   'UniformOutput',   0);
        i = 0;
        while i < numSurrogates
            i= i+1;
            for int1 = 1:size(aa,3)
                for int2 = 1:size(aa,3)
                    if int1~=int2
                        varSurrFDR{c}(i, 1+((t-1)/10)) = varSurrFDR{c}(i, 1+((t-1)/10)) + ( (temp{int1}{1,i}(1)-temp{int2}{1,i}(1))^2/(temp{int1}{1,i}(2)+temp{int2}{1,i}(2)) );
                    end
                end
            end
            clear int1 int2
        end
        clear i temp
    end
    clear t temp0 temp00
end
clear c

% --------- EV
evDataFDR = cell(model_dim,1);
c=0;    
while c < model_dim
    c=c+1;
    evDataFDR{c} = zeros(1,8);
    temp0 = cellfun(@(x) x(c,:), dataPrj, 'UniformOutput', 0);
    temp0 = temp0';
    temp00{1,1} = cell2mat(temp0(:,1)); 
    temp00{1,2} = cell2mat(temp0(:,2)); 
    temp00{1,3} = cell2mat(temp0(:,3)); 
    temp00 = temp00';
    for t=1:10:80
        temp = cellfun(@(x) [mean( reshape(x(:,t:t+9), 1, []) ); var( reshape(x(:,t:t+9), 1, []) )], temp00, 'UniformOutput', 0);
        for int1 = 1:(size(aa,3))
            for int2 = 1:(size(aa,3))
                if int1~=int2
                    evDataFDR{c}(1,1+((t-1)/10)) = evDataFDR{c}(1,1+((t-1)/10)) + ( (temp{int1}(1)-temp{int2}(1))^2/(temp{int1}(2)+temp{int2}(2)) );
                end
            end
        end
        clear temp
    end
    clear t int1 int2 temp00 temp0
end
clear c

evSurrFDR = cell(model_dim,1); 
c=0;
while c < model_dim
    c=c+1;
    evSurrFDR{c} = zeros(numSurrogates, 8);
    temp0 = cellfun(@(x)  cellfun(@(y) y(c,:), x, 'UniformOutput', 0),  surrPrj,  'UniformOutput',  0);
    temp0 = cellfun(@(x)  x',  temp0,  'UniformOutput',  0);
    temp00{1,1} = cellfun(@(x) cell2mat(x(:,1)), temp0,  'UniformOutput',  0);
    temp00{1,2} = cellfun(@(x) cell2mat(x(:,2)), temp0,  'UniformOutput',  0);
    temp00{1,3} = cellfun(@(x) cell2mat(x(:,3)), temp0,  'UniformOutput',  0);
    temp00 = temp00';
    for t=1:10:80
        temp = cellfun(@(x)   cellfun(@(y) [mean( reshape(y(:,t:t+9), 1, []) ); var( reshape(y(:,t:t+9), 1, []) )],   x, 'UniformOutput', 0),   temp00,   'UniformOutput',   0);
        i = 0;
        while i < numSurrogates
            i= i+1;
            for int1 = 1:size(aa,2)
                for int2 = 1:size(aa,2)
                    if int1~=int2
                        evSurrFDR{c}(i, 1+((t-1)/10)) = evSurrFDR{c}(i, 1+((t-1)/10)) + ( (temp{int1}{1,i}(1)-temp{int2}{1,i}(1))^2/(temp{int1}{1,i}(2)+temp{int2}{1,i}(2)) );
                    end
                end
            end
            clear int1 int2
        end
        clear i temp
    end
    clear t temp0 temp00
end
clear c

%% 
% number of components to plot per marginalization
numCompToPlot = 3;
fg = figure('Name', [Monkey ', ' Area ', First ' num2str(numCompToPlot) ' compnents for each fcator out of first ' num2str(model_dim) ' dPCs, ' num2str(numSurrogates) ' Surrogates']); 

% plot EV componnets
c = find(dataWhichMarg == 1,numCompToPlot);
cSurr = cellfun(@(x) find(x == 1,numCompToPlot)' , surrWhichMarg, 'UniformOutput', 0)';
tempEVSurrFDR = cell(numSurrogates,1);
for isur= 1:numSurrogates
    tempEVSurrFDR{isur} = cell2mat( cellfun(@(x) x(isur,:), evSurrFDR, 'UniformOutput', 0) );
end
clear isur

for i = 1:length(c)
    subplot(3,numCompToPlot,i), hold on, box on, 
    title([{['EV Grouping - ' 'Data component ' num2str(c(i)) ' vs']} , {[' Noise ' num2str(i) 'th Factor Variance Expl. component']}])
    xlabel('Time Window')
    ylabel('Fisher Discriminant Ratio')
    temp = cell2mat( cellfun(@(x,y) x(y(i),:) , tempEVSurrFDR, cSurr, 'UniformOutput', 0) );
    errorbar(newT(1:10:80), mean(temp), std(temp), 'Color', [0.7 0.7 0.7])
%     plot(newT(1:10:80), evSurrFDR{c(i)}', 'Color', [0.7 0.7 0.7])
    plot(newT(1:10:80), evDataFDR{c(i)}, 'b*')
    legend('Shuffled','Data','Position','Best')
    clear temp
end
clear c cSurr tempEVSurrFDR i


% plot Var componnets
c = find(dataWhichMarg == 2,numCompToPlot);
cSurr = cellfun(@(x) find(x == 2,numCompToPlot)' , surrWhichMarg, 'UniformOutput', 0)';
tempVarSurrFDR = cell(numSurrogates,1);
for isur= 1:numSurrogates
    tempVarSurrFDR{isur} = cell2mat( cellfun(@(x) x(isur,:), varSurrFDR, 'UniformOutput', 0) );
end
clear isur

for i = 1:length(c)
    subplot(3,numCompToPlot,numCompToPlot+i), hold on, box on, 
    title([{['Var Grouping - ' 'Data component ' num2str(c(i)) ' vs']} , {[' Noise ' num2str(i) 'th Factor Variance Expl. component']}])
    xlabel('Time Window')
    ylabel('Fisher Discriminant Ratio')
    temp = cell2mat( cellfun(@(x,y) x(y(i),:) , tempVarSurrFDR, cSurr, 'UniformOutput', 0) );
    errorbar(newT(1:10:80), mean(temp), std(temp), 'Color', [0.7 0.7 0.7])
%     plot(newT(1:10:80), varSurrFDR{c(i)}', 'Color', [0.7 0.7 0.7])
    plot(newT(1:10:80), varDataFDR{c(i)}, 'b*')
    legend('Shuffled','Data','Position','Best')
    clear temp
end
clear c cSurr tempVarSurrFDR i


% plot Interaction componnets
c = find(dataWhichMarg == 4,numCompToPlot);
cSurr = cellfun(@(x) find(x == 4,numCompToPlot)' , surrWhichMarg, 'UniformOutput', 0)';
tempIntSurrFDR = cell(numSurrogates,1);
for isur= 1:numSurrogates
    tempIntSurrFDR{isur} = cell2mat( cellfun(@(x) x(isur,:), intSurrFDR, 'UniformOutput', 0) );
end
clear isur

for i = 1:length(c)
    subplot(3,numCompToPlot,2*numCompToPlot+i), hold on, box on, 
    title([{['Int. Grouping - ' 'Data component ' num2str(c(i)) ' vs']} , {[' Noise ' num2str(i) 'th Factor Variance Expl. component']}])
    xlabel('Time Window')
    ylabel('Fisher Discriminant Ratio')
    temp = cell2mat( cellfun(@(x,y) x(y(i),:) , tempIntSurrFDR, cSurr, 'UniformOutput', 0) );
    errorbar(newT(1:10:80), mean(temp), std(temp), 'Color', [0.7 0.7 0.7])
%     plot(newT(1:10:80), intSurrFDR{c(i)}', 'Color', [0.7 0.7 0.7])
    plot(newT(1:10:80), intDataFDR{c(i)}, 'b*')
    legend('Shuffled','Data','Position','Best')
    clear temp
end
clear c cSurr tempIntSurrFDR i

% % % % saveas(fg, ['X:\Report 13\Test dPCA\' Monkey '_' Area '_TME_' surrogate_type '_' alignedEvent '[' regexprep(num2str(timeIntervalOfInterest(1)),'0.','0,') ' ' regexprep(num2str(timeIntervalOfInterest(2)),'0.','0,') ']'], 'fig')
% % % % saveas(fg, ['X:\Report 13\Test dPCA\' Monkey '_' Area '_TME_' surrogate_type '_' alignedEvent '[' regexprep(num2str(timeIntervalOfInterest(1)),'0.','0,') ' ' regexprep(num2str(timeIntervalOfInterest(2)),'0.','0,') ']'], 'bmp')
% % % % close(fg)
% % % % clear fg









